version: '3.9'

services:

  homeassistant:
    profiles:
      - hass
    container_name: homeassistant
    image: ${homeassistant_image}:${homeassistant_version}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${share1}/home-assistant/config:/config
    environment:
      - TZ=${tz} 
    restart: unless-stopped
    privileged: true
    network_mode: host

  appdaemon:
    profiles:
      - hass
    container_name: appdaemon
    image: ${appdaemon_image}:${appdaemon_version}
    environment:
      HA_URL: "http://home-assistant.home:8123"
      HA_KEY: ${home_assistant_key}
      DASH_URL: "http://home-assistant.home:5050"
    volumes:
      - /etc/localtime:/etc/localtime
      - ${share1}/appdaemon/conf:/conf
    ports:
      - "5050:5050"
    depends_on:
      - homeassistant
    restart: always
    
  unifi:
    profiles:
      - network
    image: ${unifi_image}:${unifi_version}
    container_name: unifi
    environment:
      - TZ=${tz}
    volumes:
      - ${share1}/unifi:/unifi
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
    restart: always
    
  duplicati:
    profiles:
      - backup
    image: ${duplicati_image}:${duplicati_version}
    container_name: duplicati
    ports:
      - 80:8200
    environment:
      - TZ=${tz}
    volumes:
      - ${share1}/duplicati/config:/config
      - ${share1}:/share1
      - ${share2}:/share2
    restart: always
    
  samba:
    profiles:
      - nas
    image: ${samba_image}:${samba_version}
    container_name: samba
    command: '-u "smbuser;smbuser" -s "share1;/share1;yes;no;yes"'
    environment:
      - TZ=${tz}
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"  
    volumes:
      - ${share1}:/share1
    restart: always
    
  mosquitto:
    profiles:
      - mqtt
    container_name: mosquitto
    image: ${mosquitto_image}:${mosquitto_version}
    ports:
      - 1883:1883
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${share1}/mosquitto/config:/mosquitto/config:rw
    restart: always
    
  deepstack:
    profiles:
      - deepstack      
    container_name: deepstack
    image: ${deepstack_image}:${deepstack_version}
    restart: unless-stopped
    ports:
      - 5000:5000
    environment:
      VISION-FACE: 'True'
      MODE: High
    volumes:
      - ${share1}/deepstack:/datastore
      
  compreface-postgres-db:
    profiles:
      - compreface    
    # image: ${postgres_image}:${postgres_version}
    image: ${compreface_postgres_image}:${compreface_postgres_version}
    container_name: "compreface-postgres-db"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${postgres_username}
      - POSTGRES_PASSWORD=${postgres_password}
      - POSTGRES_DB=${postgres_db}
    volumes:
      - ${share1}/compreface:/var/lib/postgresql/data

  compreface-admin:   
    profiles:
      - compreface      
    image: ${compreface_admin_image}:${compreface_admin_version}
    container_name: "compreface-admin"
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${postgres_username}
      - POSTGRES_PASSWORD=${postgres_password}
      - POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}
      - SPRING_PROFILES_ACTIVE=dev
      - ENABLE_EMAIL_SERVER=${enable_email_server}
      - EMAIL_HOST=${email_host}
      - EMAIL_USERNAME=${email_username}
      - EMAIL_FROM=${email_from}
      - EMAIL_PASSWORD=${email_password}
      - ADMIN_JAVA_OPTS=${compreface_admin_java_options}
    depends_on:
      - compreface-postgres-db
      - compreface-api

  compreface-api:  
    profiles:
      - compreface      
    image: ${compreface_api_image}:${compreface_api_version}
    container_name: "compreface-api"
    restart: unless-stopped
    depends_on:
      - compreface-postgres-db
    environment:
      - POSTGRES_USER=${postgres_username}
      - POSTGRES_PASSWORD=${postgres_password}
      - POSTGRES_URL=jdbc:postgresql://${postgres_domain}:${postgres_port}/${postgres_db}
      - SPRING_PROFILES_ACTIVE=dev
      - API_JAVA_OPTS=${compreface_api_java_options}
      - SAVE_IMAGES_TO_DB=${save_images_to_db}

  compreface-fe:   
    profiles:
      - compreface    
    image: ${compreface_fe_image}:${compreface_fe_version}
    container_name: "compreface-ui"
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - compreface-api
      - compreface-admin

  compreface-core:  
    profiles:
      - compreface      
    image: ${compreface_core_image}:${compreface_core_version}
    container_name: "compreface-core"
    restart: unless-stopped
    environment:
      - ML_PORT=3000
      
  doubletake:
    profiles:
      - nvr
    container_name: doubletake
    image: ${doubletake_image}:${doubletake_version}
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro    
      - ${share1}/doubletake:/.storage
    ports:
      - 3000:3000      
      
  frigate:
    profiles:
      - nvr  
    container_name: frigate
    privileged: true
    image: ${frigate_image}:${frigate_version}
    shm_size: "64mb"
    devices:
      - /dev/bus/usb:/dev/bus/usb 
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${share1}/frigate/config.yaml:/config/config.yml:ro
      - ${share1}/media:/media/frigate
      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: /tmp/cache
        tmpfs:
          size: 1000000000      
    ports:
      - 5000:5000
      - 1935:1935
    environment:
      FRIGATE_RTSP_PASSWORD: frigate
    restart: always
    
  baikal:
    profiles:
      - calendar
    image: ${baikal_image}:${baikal_version}
    container_name: baikal
    ports:
      - 3000:80
    volumes:
      - /etc/localtime:/etc/localtime:ro    
      - ${share1}/baikal/config:/var/www/baikal/config
      - ${share1}/baikal/data:/var/www/baikal/Specific
    restart: always

  agendav:
    profiles:
      - calendar  
    image: ${agendav_image}:${agendav_version}
    container_name: agendav
    volumes:
      - /etc/localtime:/etc/localtime:ro    
    environment:
      - AGENDAV_SERVER_NAME=127.0.0.1
      - AGENDAV_TITLE=Welcome to HomeAssistant Agendav Server
      - AGENDAV_FOOTER=Hosted by HomeAssistant
      - AGENDAV_ENC_KEY=my_encrypt10n_k3y
      - AGENDAV_CALDAV_SERVER=http://baikal.home:3000/cal.php
      - AGENDAV_TIMEZONE=${tz}
      - AGENDAV_LANG=en
      - AGENDAV_LOG_DIR=/tmp/
    depends_on:
      - baikal      
    ports:
      - 80:80
    restart: always    

  influxdb:
    profiles:
      - database
    image: ${influxdb_image}:${influxdb_version}
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - /etc/localtime:/etc/localtime:ro 
      - ${share1}/influxdb/data:/var/lib/influxdb2
      - ${share1}/influxdb/config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${influxdb_username}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${influxdb_password}
      - DOCKER_INFLUXDB_INIT_ORG=${influxdb_org}
      - DOCKER_INFLUXDB_INIT_BUCKET=${influxdb_bucket}
      - DOCKER_INFLUXDB_INIT_RETENTION=${influxdb_retention}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${influxdb_admin_token}
    # network_mode: "bridge"
    restart: always

  grafana:
    profiles:
      - database  
    image: ${grafana_image}:${grafana_version}
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true    
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${share1}/grafana:/var/lib/grafana
    ports:
      - "3000:3000"
    # network_mode: "bridge"
    restart: always   
    
  mariadb:
    profiles:
      - mariadb
    container_name: mariadb
    image: ${mariadb_image}:${mariadb_version}
    ports:
      - "3306:3306/tcp"
    volumes:
      - /etc/localtime:/etc/localtime:ro    
      - ${share1}/mariadb/config:/etc/mysql/conf.d
      - ${share1}/mariadb/data:/var/lib/mysql
    environment:
      TZ: ${tz}
      MYSQL_ROOT_PASSWORD: ${mysql_root_password}
      MYSQL_DATABASE: ${mysql_database}
      MYSQL_USER: ${mysql_user}
      MYSQL_PASSWORD: ${mysql_password}    
    restart: always
